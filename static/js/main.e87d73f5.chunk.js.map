{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["initialState","Todo","useState","st","setSt","uo","setUo","value","onChange","e","target","onClick","preventDefault","className","map","el","ind","key","id","console","log","ss","filter","it","inn","dellist","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2LACIA,EAAa,GA+BFC,MA9Bf,WAAiB,IAAD,EACKC,mBAAS,IADd,mBACNC,EADM,KACFC,EADE,OAEEF,mBAASF,GAFX,mBAEVK,EAFU,KAENC,EAFM,KASZ,OACI,oCACI,8BACA,2BACAC,MAAOJ,EACPK,SAAU,SAAAC,GAAC,OAAEL,EAAMK,EAAEC,OAAOH,UAC5B,4BAAQI,QAAS,SAACF,GACdH,GAAM,SAAAD,GAAE,OAAEF,EAAG,GAAD,mBAAKE,GAAL,CAAQF,IAAR,YAAgBE,MAC5BD,EAAM,IACNK,EAAEG,mBAHN,QAKJ,wBACAC,UAAU,mBAEPR,EAAGS,KAAI,SAACC,EAAIC,GAAL,OAAY,wBAAIC,IAAKD,EAAKH,UAAU,kDACvCE,EAAG,4BAAQF,UAAU,oBAAoBF,QAAS,YArBlD,SAACO,GACZC,QAAQC,IAAI,KACZ,IACMC,EADO,YAAIhB,GACCiB,QAAO,SAACC,EAAGC,GAAJ,OAAWA,IAAON,KAC3CZ,EAAMe,GAiB4DI,CAAQT,KAA5D,YCdHU,MARf,WACE,OACE,yBAAKb,UAAU,0CACb,kBAAC,EAAD,QCKcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.e87d73f5.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nlet initialState=[]\r\nfunction Todo() {\r\n    const[st, setSt]=useState('')\r\nconst[uo, setUo]= useState(initialState)\r\nconst dellist =(id)=>{\r\n    console.log('d')\r\n    let tempList=[...uo]\r\n    const ss=tempList.filter((it,inn)=> inn !==id)\r\n    setUo(ss)\r\n}\r\n    return (\r\n        <>\r\n            <form>\r\n            <input\r\n            value={st}\r\n            onChange={e=>setSt(e.target.value)}/>\r\n            <button onClick={(e)=>{\r\n                setUo(uo=>st?[...uo,st]:[...uo])\r\n                setSt('')\r\n                e.preventDefault()}}>add</button>\r\n                </form>\r\n        <ul \r\n        className='list-group mt-2'\r\n        > \r\n          {uo.map((el, ind) =><li key={ind} className='list-group-item d-flex justify-content-between'>\r\n              {el}<button className='badge bg-dark btn' onClick={()=>{dellist(ind)}}>X</button></li>)}  \r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react';\nimport Todo from './Todo';\n\n\nfunction App() {\n  return (\n    <div className=\"App container bg-dark text-center py-2\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}